# -*- coding: utf-8 -*-

"""
/*************************
programacao_aplicada_IME_grupo_1
                                 A QGIS plugin
 Solução do Grupo 1
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-06-03
        copyright            : (C) 2023 by Grupo 1
        emails               : joao.pereira@ime.eb.br
                               marcio.santos@ime.eb.br
                               pedro.kovalczuk@ime.eb.br
                               vinicius.magalhaes@ime.eb.br
                            
 *************************/

/*************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *************************/
"""
from numpy import sqrt
from collections import namedtuple
from qgis.core import (QgsProcessing,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterMultipleLayers,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterNumber, QgsProcessingParameterVectorLayer,
                       QgsProject,
                       QgsField,
                       QgsFeatureSink,
                       QgsCoordinateReferenceSystem, QgsRenderContext,
                       QgsVectorLayer,
                       QgsFields,
                       QgsGeometry,
                       QgsPointXY,
                       QgsFeature,
                       QgsRaster)

from PyQt5.QtCore import QVariant
from qgis.analysis import QgsNativeAlgorithms
from qgis.PyQt.QtCore import QCoreApplication
import processing
from qgis.utils import iface

_author_ = 'Grupo 1'
_date_ = '2023-06-03'
_copyright_ = '(C) 2023 by Grupo 1'

# This will get replaced with a git SHA1 when you do a git archive

_revision_ = '$Format:%H$'


class Projeto4Solucao(QgsProcessingAlgorithm):

    TARGET_INPUT = 'TARGET_INPUT'
    FRAME_INPUT = 'FRAME_INPUT'
    SEARCH_DISTANCE = 'SEARCH_DISTANCE'
    ERROR_OUTPUT = 'ERROR_OUTPUT'

    def initAlgorithm(self, config=None):

        # Inputs
        # Target - Camada vetorial do tipo linha para verificação de erros de ligação.
        self.addParameter(QgsProcessingParameterVectorLayer(self.TARGET_INPUT,
                                                            'Camada-alvo', defaultValue=None))

        # Frame - Camada vetorial do tipo polígono que delimita a área de verificação de erros.
        self.addParameter(QgsProcessingParameterVectorLayer(self.FRAME_INPUT,
                                                            'Moldura', defaultValue=None))

        # Search distance - Distância de busca de feições para verificação de erros.
        self.addParameter(QgsProcessingParameterNumber(self.SEARCH_DISTANCE,
                                                       'Distância de busca',
                                                       type=QgsProcessingParameterNumber.Double,
                                                       defaultValue=50.0))

        # Output - Generalized layer with buildings displaced and rotated.
        self.addParameter(QgsProcessingParameterFeatureSink(self.ERROR_OUTPUT,
                                                            'ERROR_OUTPUT'))

    def processAlgorithm(self, parameters, context, feedback):

        # Camada de moldura
        moldura = self.parameterAsVectorLayer(
            parameters, self.FRAME_INPUT, context)

        # Camada de saída do tipo ponto com campo de "tipo do erro"
        fields = QgsFields()
        fields.append(QgsField("tipo_do_erro", QVariant.String))
        (output_sink, output_dest_id) = self.parameterAsSink(parameters, self.ERROR_OUTPUT, context,
                                                             fields, 1, moldura.sourceCrs())

        erro1 = "geometria_desconectada"
        erro2 = "atributos_diferentes"

        ''' Dentro da iteração:

        feição = feature de estudo do erro (dentro de target_input_layer_k)

        new_feature = QgsFeature(fields)
        new_feature.setGeometry(feição)
        new_feature.setAttribute(0, erro1 ou erro2)
        output_sink.addFeature(new_feature, QgsFeatureSink.FastInsert)
        
        '''

    def name(self):
        return 'Solução do Projeto 4'

    def displayName(self):
        return self.tr(self.name())

    def group(self):
        return self.tr(self.groupId())

    def groupId(self):
        return 'Projeto 4'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return Projeto4Solucao()
