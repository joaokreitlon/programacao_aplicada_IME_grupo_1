# -*- coding: utf-8 -*-

"""
/*************************
programacao_aplicada_IME_grupo_1
                                 A QGIS plugin
 Solução do Grupo 1
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-05-20
        copyright            : (C) 2023 by Grupo 1
        emails               : joao.pereira@ime.eb.br
                               marcio.santos@ime.eb.br
                               pedro.kovalczuk@ime.eb.br
                               vinicius.magalhaes@ime.eb.br
                            
 *************************/

/*************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *************************/
"""
from qgis.core import (QgsProcessing,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterMultipleLayers,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterNumber,
                       QgsProject,
                       QgsField,
                       QgsFeatureSink,
                       QgsCoordinateReferenceSystem,
                       QgsVectorLayer,
                       QgsFields,
                       QgsGeometry,
                       QgsPointXY,
                       QgsFeature,
                       QgsRaster)

from PyQt5.QtCore import QVariant
from qgis.analysis import QgsNativeAlgorithms
from qgis.PyQt.QtCore import QCoreApplication
import processing
from qgis.utils import iface

_author_ = 'Grupo 1'
_date_ = '2023-05-20'
_copyright_ = '(C) 2023 by Grupo 1'

# This will get replaced with a git SHA1 when you do a git archive

_revision_ = '$Format:%H$'


class Projeto3Solucao(QgsProcessingAlgorithm):

    INPUT_BUILDINGS = 'INPUT_BUILDINGS'
    INPUT_ROADS = 'INPUT_ROADS'
    DISPLACEMENT_DISTANCE = 'DISPLACEMENT_DISTANCE'
    OUTPUT = 'OUTPUT'

    def initAlgorithm(self, config=None):

        # Inputs

        # Buildings - they will be the focus of cartographic generalization (External iteration).
        self.addParameter(QgsProcessingParameterFeatureSource(self.INPUT_BUILDINGS,
                                                              'BUILDINGS', [QgsProcessing.TypeVectorPoint], defaultValue=None))

        # Roads - they will be used to verify if a building is left or right of a road and to move the building according to geometries and styles.
        self.addParameter(QgsProcessingParameterFeatureSource(self.INPUT_ROADS,
                                                              'ROADS', [QgsProcessing.TypeVectorLine], defaultValue=None))

        # Displacement distance - it will be used to create the space between buildings and between a single build and the road.
        self.addParameter(QgsProcessingParameterNumber(self.DISPLACEMENT_DISTANCE,
                                                       'DISPLACEMENT DISTANCE',
                                                       type=QgsProcessingParameterNumber.Double,
                                                       defaultValue=10.0))

        # Output - Generalized layer with buildings displaced and rotated.
        self.addParameter(QgsProcessingParameterFeatureSink(self.OUTPUT,
                                                            'GENERALIZED_BUILDINGS'))

    def processAlgorithm(self, parameters, context, feedback):

        # Multiline source
        src_ml = self.parameterAsSource(
            parameters, self.INPUT_MULTILINE, context)

        # Polygon source
        src_poly = self.parameterAsSource(
            parameters, self.INPUT_POLYGON, context)

    def name(self):
        return 'Solução do Projeto 3'

    def displayName(self):
        return self.tr(self.name())

    def group(self):
        return self.tr(self.groupId())

    def groupId(self):
        return 'Projeto 3'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return Projeto3Solucao()
